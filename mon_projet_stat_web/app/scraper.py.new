from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import sys
import os
import re
import traceback

def extract_users_from_course(username, password, course_url, headless=True):
    """
    Extrait les informations des utilisateurs inscrits à un cours spécifique
    """
    print(f"[Selenium] Extraction des utilisateurs pour le cours : {course_url}", file=sys.stderr)
    options = Options()
    options.use_chromium = True
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-extensions')
    options.add_argument('--disable-logging')
    options.add_argument('--log-level=3')
    options.add_argument('--silent')
    options.add_argument('--disable-infobars')
    options.add_experimental_option('excludeSwitches', ['enable-logging'])

    driver = webdriver.Edge(service=Service("C:/WebDriver/msedgedriver.exe"), options=options)
    wait = WebDriverWait(driver, 30)  # timeout réduit à 30s pour détecter les problèmes plus rapidement
    users_data = []
    
    try:
        # Login
        driver.get("https://elearning.sebn.com/")
        wait.until(EC.presence_of_element_located((By.NAME, "login")))
        driver.find_element(By.NAME, "login").send_keys(username)
        driver.find_element(By.NAME, "password").send_keys(password)
        driver.find_element(By.NAME, "submit_login").click()

        # Aller à la page du cours
        driver.get(course_url)
        wait.until(EC.presence_of_element_located((By.ID, "usersTable")))

        # Maximiser le nombre de lignes par page
        script = """
            const select = document.querySelector('select.select-rows');
            const maxOption = Array.from(select.options)
                .filter(opt => opt.value.match(/^\\d+$/))
                .sort((a, b) => Number(b.value) - Number(a.value))[0];
            if (maxOption) {
                select.value = maxOption.value;
                select.dispatchEvent(new Event('change'));
            }
        """
        driver.execute_script(script)
        time.sleep(0.5)

        # Script d'extraction des utilisateurs
        script = """
            const users = [];
            const rows = document.querySelectorAll('#usersTable tr.defaultRowHeight');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length < 2) return;
                const nameText = cells[0].textContent.trim();
                
                // Vérifier l'inscription
                const enrolled = row.querySelector('button.enrolled, input[value="Enrolled"]') !== null;
                if (!enrolled) return;
                
                // Extraire nom et matricule
                let name = nameText;
                let matricule = '';
                if (nameText.includes('(MASA')) {
                    [name, matricule] = nameText.split('(MASA');
                    name = name.trim();
                    matricule = matricule.replace(')', '').trim();
                }
                
                // Récupérer le statut
                const statusCell = row.querySelector('td[data-name="status"] .ef-grid-cell-edit-value');
                const status = statusCell ? statusCell.textContent.trim() : 'Unknown';
                
                users.push({
                    full_name: name,
                    matricule: matricule,
                    status: status
                });
            });
            return users;
        """
        
        # Extraire les utilisateurs de la première page
        users_data = driver.execute_script(script)
        
        # Vérifier s'il y a plus de pages
        total_pages = len(driver.find_elements(By.CSS_SELECTOR, "select.select-page option[value]"))
        
        # Si plus d'une page, extraire les autres pages
        if total_pages > 1:
            for i in range(1, total_pages):
                try:
                    driver.execute_script(f"document.querySelector('select.select-page').value = '{i}';")
                    driver.execute_script("document.querySelector('select.select-page').dispatchEvent(new Event('change'));")
                    time.sleep(0.3)
                    page_users = driver.execute_script(script)
                    users_data.extend(page_users)
                except Exception as e:
                    print(f"[Selenium] Erreur sur la page {i+1}: {str(e)}", file=sys.stderr)

        return users_data

    except Exception as e:
        print(f"[Selenium] Erreur d'extraction: {str(e)}", file=sys.stderr)
        return None

    finally:
        driver.quit()

def extract_courses_and_users(username, password, headless=False):
    """
    Extrait la liste des cours et leurs statistiques
    """
    print("[Selenium] Initialisation du driver Edge", file=sys.stderr)
    options = Options()
    options.use_chromium = True
    if headless:
        options.add_argument('--headless')
        options.add_argument('--disable-gpu')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-extensions')
    
    driver = webdriver.Edge(service=Service("C:/WebDriver/msedgedriver.exe"), options=options)
    wait = WebDriverWait(driver, 15)
    results = []
    
    try:
        print("[Selenium] Connexion à la plateforme", file=sys.stderr)
        driver.get("https://elearning.sebn.com/")
        wait.until(EC.presence_of_element_located((By.NAME, "login")))
        driver.find_element(By.NAME, "login").send_keys(username)
        driver.find_element(By.NAME, "password").send_keys(password)
        driver.find_element(By.NAME, "submit_login").click()
        
        print("[Selenium] Accès au dashboard", file=sys.stderr)
        wait.until(EC.url_contains("/start"))
        driver.get("https://elearning.sebn.com/start")
        
        print("[Selenium] Extraction des cours", file=sys.stderr)
        wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".ef-course-card")))
        cours_cards = driver.find_elements(By.CSS_SELECTOR, ".ef-course-card")
        total_cours = len(cours_cards)
        print(f"[Selenium] {total_cours} cours trouvés", file=sys.stderr)
        
        for i, card in enumerate(cours_cards, 1):
            try:
                nom = card.find_element(By.CSS_SELECTOR, "h4 a").text.strip()
                lien = card.find_element(By.CSS_SELECTOR, "h4 a").get_attribute("href")
                print(f"[Selenium] ({i}/{total_cours}) Cours : {nom}", file=sys.stderr)
                
                result = {'cours': nom, 'lien': lien, 'users': None, 'completed': None, 'taux_completion': None}
                
                # Ouvrir le cours dans un nouvel onglet
                driver.execute_script("window.open(arguments[0]);", lien)
                driver.switch_to.window(driver.window_handles[-1])
                
                try:
                    # Attendre et extraire les statistiques
                    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".ef-preview-box-course-stats")))
                    stats = {}
                    
                    # Utiliser JavaScript pour extraire les statistiques plus rapidement
                    script = """
                        const stats = {};
                        document.querySelectorAll('.ef-preview-box-course-stats').forEach(box => {
                            const label = box.querySelector('.ef-info-header').textContent.toLowerCase().trim();
                            const value = box.querySelector('.colored-info').textContent.trim();
                            stats[label] = value;
                        });
                        return stats;
                    """
                    stats = driver.execute_script(script)
                    
                    # Mettre à jour le résultat
                    if 'users' in stats:
                        result['users'] = stats['users']
                    if 'completed' in stats:
                        result['completed'] = stats['completed']
                    
                    # Calculer le taux de complétion
                    if (result['users'] and result['completed'] and 
                        str(result['users']).isdigit() and str(result['completed']).isdigit()):
                        users = int(result['users'])
                        completed = int(result['completed'])
                        result['taux_completion'] = round((completed / users * 100), 2) if users > 0 else 0
                    else:
                        result['taux_completion'] = 0
                    
                except Exception as e:
                    print(f"[Selenium] Erreur stats cours {nom}: {str(e)}", file=sys.stderr)
                
                finally:
                    results.append(result)
                    driver.close()
                    driver.switch_to.window(driver.window_handles[0])
                
            except Exception as e:
                print(f"[Selenium] Erreur cours {i}: {str(e)}", file=sys.stderr)
                continue
        
        return results
        
    except Exception as e:
        print(f"[Selenium] Erreur générale: {str(e)}", file=sys.stderr)
        return None
        
    finally:
        try:
            driver.quit()
        except:
            pass
